!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _main__user__routines 
    interface
        subroutine potential(q,v,dvdq,natoms,nbeads)
            double precision dimension(3,natoms,nbeads),intent(in) :: q
            double precision dimension(nbeads),intent(out),depend(nbeads) :: v
            double precision dimension(3,natoms,nbeads),intent(out),depend(natoms,nbeads) :: dvdq
            integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
            integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
        end subroutine potential
    end interface
end python module _main__user__routines
python module _main ! in 
    interface  ! in :_main
        module system ! in :_main:rpmd/_main.f90
            double precision :: beta
            double precision dimension(100) :: mass
            integer :: mode
            integer, parameter,optional :: max_atoms=100
            double precision :: dt
            double precision, optional :: pi=dacos(-1.0d0)
            integer :: thermostat
            double precision :: andersen_sampling_time
            subroutine equilibrate(t,p,q,natoms,nbeads,steps,xi_current,potential,kforce,constrain,save_trajectory,result) ! in :_main:rpmd/_main.f90:system
                use _main__user__routines
                double precision intent(inout) :: t
                double precision dimension(3,natoms,nbeads),intent(inout) :: p
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
                integer intent(in) :: steps
                double precision intent(in) :: xi_current
                external potential
                double precision intent(in) :: kforce
                integer intent(in) :: constrain
                integer intent(in) :: save_trajectory
                integer intent(out) :: result
            end subroutine equilibrate
            subroutine recrossing_trajectory(t,p,q,natoms,nbeads,steps,xi_current,potential,save_trajectory,kappa_num,kappa_denom,result) ! in :_main:rpmd/_main.f90:system
                use _main__user__routines
                double precision intent(inout) :: t
                double precision dimension(3,natoms,nbeads),intent(inout) :: p
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
                integer, optional,intent(in),check(len(kappa_num)>=steps),depend(kappa_num) :: steps=len(kappa_num)
                double precision intent(in) :: xi_current
                external potential
                integer intent(in) :: save_trajectory
                double precision dimension(steps),intent(inout) :: kappa_num
                double precision intent(inout) :: kappa_denom
                integer intent(out) :: result
            end subroutine recrossing_trajectory
            subroutine umbrella_trajectory(t,p,q,natoms,nbeads,steps,xi_current,potential,kforce,save_trajectory,av,av2,result) ! in :_main:rpmd/_main.f90:system
                use _main__user__routines
                double precision intent(inout) :: t
                double precision dimension(3,natoms,nbeads),intent(inout) :: p
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
                integer intent(in) :: steps
                double precision intent(in) :: xi_current
                external potential
                double precision intent(in) :: kforce
                integer intent(in) :: save_trajectory
                double precision intent(out) :: av
                double precision intent(out) :: av2
                integer intent(out) :: result
            end subroutine umbrella_trajectory
            subroutine verlet_step(t,p,q,v,dvdq,xi,dxi,d2xi,natoms,nbeads,xi_current,potential,kforce,constrain,result) ! in :_main:rpmd/_main.f90:system
                use _main__user__routines
                double precision intent(inout) :: t
                double precision dimension(3,natoms,nbeads),intent(inout) :: p
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
                double precision dimension(nbeads),intent(inout),depend(nbeads) :: v
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: dvdq
                double precision intent(inout) :: xi
                double precision dimension(3,natoms),intent(inout),depend(natoms) :: dxi
                double precision dimension(3,natoms,3,natoms),intent(inout),depend(natoms,natoms) :: d2xi
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
                double precision intent(in) :: xi_current
                external potential
                double precision intent(in) :: kforce
                integer intent(in) :: constrain
                integer intent(out) :: result
            end subroutine verlet_step
            subroutine free_ring_polymer_step(p,q,natoms,nbeads) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(inout) :: p
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            end subroutine free_ring_polymer_step
            subroutine constrain_to_dividing_surface(p,q,dxi,natoms,nbeads,xi_current) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(inout) :: p
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: q
                double precision dimension(3,natoms),intent(inout),depend(natoms) :: dxi
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
                double precision intent(in) :: xi_current
            end subroutine constrain_to_dividing_surface
            subroutine constrain_momentum_to_dividing_surface(p,dxi,natoms,nbeads) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(inout) :: p
                double precision dimension(3,natoms),intent(in),depend(natoms) :: dxi
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
            end subroutine constrain_momentum_to_dividing_surface
            subroutine add_umbrella_potential(xi,dxi,v,dvdq,natoms,nbeads,xi_current,kforce) ! in :_main:rpmd/_main.f90:system
                double precision intent(in) :: xi
                double precision dimension(3,natoms),intent(in) :: dxi
                double precision dimension(nbeads),intent(inout) :: v
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: dvdq
                integer, optional,intent(in),check(shape(dxi,1)==natoms),depend(dxi) :: natoms=shape(dxi,1)
                integer, optional,intent(in),check(len(v)>=nbeads),depend(v) :: nbeads=len(v)
                double precision intent(in) :: xi_current
                double precision intent(in) :: kforce
            end subroutine add_umbrella_potential
            subroutine add_bias_potential(dxi,d2xi,v,dvdq,natoms,nbeads) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms),intent(in) :: dxi
                double precision dimension(3,natoms,3,natoms),intent(in),depend(natoms,natoms) :: d2xi
                double precision dimension(nbeads),intent(inout) :: v
                double precision dimension(3,natoms,nbeads),intent(inout),depend(natoms,nbeads) :: dvdq
                integer, optional,intent(in),check(shape(dxi,1)==natoms),depend(dxi) :: natoms=shape(dxi,1)
                integer, optional,intent(in),check(len(v)>=nbeads),depend(v) :: nbeads=len(v)
            end subroutine add_bias_potential
            subroutine get_reaction_coordinate(centroid,natoms,xi_current,xi,dxi,d2xi) ! in :_main:rpmd/_main.f90:system
                use reactants, only: reactants_gradient=>gradient,reactants_hessian=>hessian,reactants_value=>value
                use transition_state, only: transition_state_gradient=>gradient,transition_state_hessian=>hessian,transition_state_value=>value
                double precision dimension(3,natoms),intent(in) :: centroid
                integer, optional,intent(in),check(shape(centroid,1)==natoms),depend(centroid) :: natoms=shape(centroid,1)
                double precision intent(in) :: xi_current
                double precision intent(out) :: xi
                double precision dimension(3,natoms),intent(out),depend(natoms) :: dxi
                double precision dimension(3,natoms,3,natoms),intent(out),depend(natoms,natoms) :: d2xi
            end subroutine get_reaction_coordinate
            subroutine get_recrossing_flux(dxi,natoms,fs) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms),intent(in) :: dxi
                integer, optional,intent(in),check(shape(dxi,1)==natoms),depend(dxi) :: natoms=shape(dxi,1)
                double precision intent(out) :: fs
            end subroutine get_recrossing_flux
            subroutine get_recrossing_velocity(p,dxi,natoms,nbeads,vs) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(in) :: p
                double precision dimension(3,natoms),intent(in),depend(natoms) :: dxi
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
                double precision intent(out) :: vs
            end subroutine get_recrossing_velocity
            subroutine sample_momentum(p,mass,beta,natoms,nbeads) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(out),depend(natoms,nbeads) :: p
                double precision dimension(natoms),intent(in) :: mass
                double precision intent(in) :: beta
                integer, optional,intent(in),check(len(mass)>=natoms),depend(mass) :: natoms=len(mass)
                integer intent(in) :: nbeads
            end subroutine sample_momentum
            subroutine get_ring_polymer_energy(q,natoms,nbeads,ering) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(in) :: q
                integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
                integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
                double precision intent(out) :: ering
            end subroutine get_ring_polymer_energy
            subroutine get_kinetic_energy(p,natoms,nbeads,ek) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(in) :: p
                integer, optional,intent(in),check(shape(p,1)==natoms),depend(p) :: natoms=shape(p,1)
                integer, optional,intent(in),check(shape(p,2)==nbeads),depend(p) :: nbeads=shape(p,2)
                double precision intent(out) :: ek
            end subroutine get_kinetic_energy
            subroutine get_center_of_mass(q,natoms,nbeads,cm) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(in) :: q
                integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
                integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
                double precision dimension(3),intent(out) :: cm
            end subroutine get_center_of_mass
            subroutine get_centroid(q,natoms,nbeads,centroid) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(in) :: q
                integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
                integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
                double precision dimension(3,natoms),intent(out),depend(natoms) :: centroid
            end subroutine get_centroid
            subroutine get_radius_of_gyration(q,natoms,nbeads,r) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(in) :: q
                integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
                integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
                double precision dimension(natoms),intent(out),depend(natoms) :: r
            end subroutine get_radius_of_gyration
            subroutine update_vmd_output(q,natoms,nbeads,beads_file_number,centroid_file_number) ! in :_main:rpmd/_main.f90:system
                double precision dimension(3,natoms,nbeads),intent(in) :: q
                integer, optional,intent(in),check(shape(q,1)==natoms),depend(q) :: natoms=shape(q,1)
                integer, optional,intent(in),check(shape(q,2)==nbeads),depend(q) :: nbeads=shape(q,2)
                integer intent(in) :: beads_file_number
                integer intent(in) :: centroid_file_number
            end subroutine update_vmd_output
        end module system
        module transition_state ! in :_main:rpmd/_surface.f90
            integer, parameter,optional :: max_ts=16
            integer, parameter,optional :: max_atoms=100
            integer :: number_of_forming_bonds
            double precision dimension(16,16) :: forming_bond_lengths
            integer :: number_of_breaking_bonds
            double precision dimension(16,16) :: breaking_bond_lengths
            integer, parameter,optional :: max_bonds=16
            integer :: number_of_transition_states
            integer dimension(16,16,2) :: breaking_bonds
            integer dimension(16,16,2) :: forming_bonds
            subroutine evaluate_all(position,natoms,values) ! in :_main:rpmd/_surface.f90:transition_state
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision dimension(:),intent(out) :: values
            end subroutine evaluate_all
            subroutine value(position,natoms,s1) ! in :_main:rpmd/_surface.f90:transition_state
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision intent(out) :: s1
            end subroutine value
            subroutine gradient(position,natoms,ds1) ! in :_main:rpmd/_surface.f90:transition_state
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision dimension(3,natoms),intent(out),depend(natoms) :: ds1
            end subroutine gradient
            subroutine hessian(position,natoms,d2s1) ! in :_main:rpmd/_surface.f90:transition_state
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision dimension(3,natoms,3,natoms),intent(out),depend(natoms,natoms) :: d2s1
            end subroutine hessian
            subroutine evaluate(position,natoms,s1,ds1,d2s1) ! in :_main:rpmd/_surface.f90:transition_state
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision intent(out) :: s1
                double precision dimension(3,natoms),intent(out),depend(natoms) :: ds1
                double precision dimension(3,natoms,3,natoms),intent(out),depend(natoms,natoms) :: d2s1
            end subroutine evaluate
        end module transition_state
        module reactants ! in :_main:rpmd/_surface.f90
            integer :: nreactant1_atoms
            integer dimension(100) :: reactant1_atoms
            double precision dimension(100) :: massfrac
            integer :: nreactant2_atoms
            integer, parameter,optional :: max_atoms=100
            double precision :: rinf
            integer dimension(100) :: reactant2_atoms
            subroutine reactant1_center_of_mass(position,natoms,cm) ! in :_main:rpmd/_surface.f90:reactants
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision dimension(3),intent(out) :: cm
            end subroutine reactant1_center_of_mass
            subroutine reactant2_center_of_mass(position,natoms,cm) ! in :_main:rpmd/_surface.f90:reactants
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision dimension(3),intent(out) :: cm
            end subroutine reactant2_center_of_mass
            subroutine value(position,natoms,s0) ! in :_main:rpmd/_surface.f90:reactants
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision intent(out) :: s0
            end subroutine value
            subroutine gradient(position,natoms,ds0) ! in :_main:rpmd/_surface.f90:reactants
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision dimension(3,natoms),intent(out),depend(natoms) :: ds0
            end subroutine gradient
            subroutine hessian(position,natoms,d2s0) ! in :_main:rpmd/_surface.f90:reactants
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision dimension(3,natoms,3,natoms),intent(out),depend(natoms,natoms) :: d2s0
            end subroutine hessian
            subroutine evaluate(position,natoms,s1,ds1,d2s1) ! in :_main:rpmd/_surface.f90:reactants
                double precision dimension(3,natoms),intent(in) :: position
                integer, optional,intent(in),check(shape(position,1)==natoms),depend(position) :: natoms=shape(position,1)
                double precision intent(out) :: s1
                double precision dimension(3,natoms),intent(out),depend(natoms) :: ds1
                double precision dimension(3,natoms,3,natoms),intent(out),depend(natoms,natoms) :: d2s1
            end subroutine evaluate
        end module reactants
    end interface 
end python module _main

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
